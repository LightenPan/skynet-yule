local skynet = require "skynet"
local netpack = require "netpack"
local socket = require "socket"
local sproto = require "sproto"
local snax = require "snax"
local sprotoloader = require "sprotoloader"
local protobuf = require "protobuf"
protobuf.register_file "protocol/CSHead.pb"

local WATCHDOG
local host
local send_request

local CMD = {}
local REQUEST = {}
local client_fd

function REQUEST:query()
	print("query", self.pbcmd, self.pbsubcmd)
	local r = skynet.call("CMDROUTE", "lua", "query", self.pbcmd, self.pbsubcmd)
	print("result", r)
	return { result = r }
end

function REQUEST:get()
	print("get", self.what)
	local r = skynet.call("SIMPLEDB", "lua", "get", self.what)
	return { result = r }
end

function REQUEST:set()
	print("set", self.what, self.value)
	local r = skynet.call("SIMPLEDB", "lua", "set", self.what, self.value)
end

function REQUEST:handshake()
	return { msg = "Welcome to skynet, I will send heartbeat every 5 sec." }
end

function REQUEST:quit()
	skynet.call(WATCHDOG, "lua", "close", client_fd)
end

local function request(name, args, response)
	local r = skynet.call("CMDROUTE", "lua", "query", self.pbcmd, self.pbsubcmd)
	local f = assert(REQUEST[name])
	local r = f(args)
	if response then
		return response(r)
	end
end

local function send_package(pack)
	local package = string.pack(">s2", pack)
	socket.write(client_fd, package)
end

local function msg_unpack(msg, sz)
	local data = netpack.tostring(msg, sz, 0) --必须为0,否则这边会直接被free掉,会造成coredump
	LOG_INFO(string.format("data: %s", string.dumphex(data)))
	local cshead = protobuf.decode("app_protos.CSHead", data)

	if not cshead then
		LOG_ERROR("msg_unpack error")
		error("msg_unpack error")
	end

	return cshead
end

local function msg_pack(data)
	local msg = protobuf.encode("app_protos.CSHead", data)
	if not msg then
		LOG_ERROR("msg_pack error")
		error("msg_pack error")
	end
	return msg
end

local function msg_dispatch(cshead, csbody)
	local method = "s" .. cshead.command .. "_" .. cshead.subcmd
	LOG_INFO("head{command: %u, subcmd: %u, method: %s, seq: %u, uuid: %s, client_type: %u, head_flag: %u, client_ver: %u, signature: %s}",
	cshead.command, cshead.subcmd, method, cshead.seq, cshead.uuid, cshead.client_type, cshead.head_flag, cshead.client_ver, cshead.signature)

	begin = skynet.time()

	local ok, cmdroute = pcall(snax.uniqueservice, "cmdroute")
	if not ok then
		LOG_ERROR("uniqueservice cmdroute failed")
	end
	local module = cmdroute.req.query(cshead.command, cshead.subcmd)
	-- local module = skynet.call("cmdroute", "lua", "query", cshead.command, cshead.subcmd)
	LOG_INFO(string.format("module %s", module))
	local ok, obj = pcall(skynet.uniqueservice, module)
	if not ok then
		LOG_ERROR(string.format("unknown module %s", module))
	else
		body = "test"
		rsp = skynet.call(module, "lua", method, body)
		if not rsp then
			LOG_ERROR(string.format("pcall module %s failed.", module))
		end
	end

	local result = msg_pack(rsp)
	LOG_DEBUG("process %s time used %f ms", name, (skynet.time()-begin)*10)
	return result
end

skynet.register_protocol {
	name = "client",
	id = skynet.PTYPE_CLIENT,
	unpack = function (msg, sz)
		-- return host:dispatch(msg, sz)
		return msg_unpack(msg, sz)
	end,
	dispatch = function (_, _, cshead)
		skynet.ret(msg_dispatch(cshead))
	end
}

function CMD.start(conf)
	local fd = conf.client
	local gate = conf.gate
	WATCHDOG = conf.watchdog
	-- slot 1,2 set at main.lua
	host = sprotoloader.load(1):host "package"
	send_request = host:attach(sprotoloader.load(2))
	skynet.fork(function()
		while true do
			send_package(send_request "heartbeat")
			skynet.sleep(500)
		end
	end)

	client_fd = fd
	skynet.call(gate, "lua", "forward", fd)
end

function CMD.disconnect()
	-- todo: do something before exit
	skynet.exit()
end

skynet.start(function()
	skynet.dispatch("lua", function(_,_, command, ...)
		local f = CMD[command]
		skynet.ret(skynet.pack(f(...)))
	end)
end)
